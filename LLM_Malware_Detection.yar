/*
YARA Rule for Detecting Advanced Text Obfuscation Techniques

This rule detects files containing advanced text obfuscation techniques
including Unicode character substitution, steganography, and encoding patterns.

Based on P4RS3LT0NGV3 obfuscation techniques.

Author: Amp
Date: 2025-06-30
Version: 1.0
*/

rule Advanced_Text_Obfuscation_Detection
{
    meta:
        description = "Detects files using advanced text obfuscation techniques"
        author = "Amp"
        date = "2025-06-30"
        version = "1.0"
        severity = "Medium"
        category = "Text Obfuscation/Steganography"
        
    strings:
        
        // Unicode obfuscation patterns - using hex patterns for better matching
        
        // Upside down text patterns - hex patterns for specific Unicode ranges
        $unicode_upside_down_1 = { c9 90 }     // …ê - upside down 'a'
        $unicode_upside_down_2 = { c7 9d }     // «ù - upside down 'e'  
        $unicode_upside_down_3 = { c9 90 71 }  // …êq pattern
        $unicode_upside_down_4 = { c9 b4 }     // …π - upside down 'r'
        $unicode_upside_down_5 = { ca 87 }     //  á - upside down 't'
        
        // Elder Futhark runes - hex patterns for rune Unicode range
        $unicode_runes_1 = { e1 9a ba }       // ·ö∫ - rune H
        $unicode_runes_2 = { e1 9b 96 }       // ·õñ - rune E
        $unicode_runes_3 = { e1 9a ba e1 9b 96 }  // ·ö∫·õñ pattern
        $unicode_runes_4 = { e1 9a ?? }       // Any rune in E19A range
        $unicode_runes_5 = { e1 9b ?? }       // Any rune in E19B range
        
        // Braille patterns - hex for Braille Unicode range
        $unicode_braille_1 = { e2 a0 ?? }     // Braille range 2800-28FF
        $unicode_braille_2 = { e2 a0 93 }     // ‚†ì - Braille H
        $unicode_braille_3 = { e2 a0 91 e2 a0 87 }  // ‚†ë‚†á pattern
        
        // Small caps - hex for small caps range
        $unicode_small_caps_1 = { ca 9c }     //  ú - small cap H
        $unicode_small_caps_2 = { e1 b4 87 }  // ·¥á - small cap E  
        $unicode_small_caps_3 = { e1 b4 80 }  // ·¥Ä - small cap A
        $unicode_small_caps_4 = { e1 b4 ?? }  // Small caps range
        
        // Bubble/circled text - hex for circled range
        $unicode_bubble_1 = { e2 93 97 }      // ‚ìó - circled h
        $unicode_bubble_2 = { e2 93 94 }      // ‚ìî - circled e
        $unicode_bubble_3 = { e2 93 ?? }      // Circled range
        
        // Medieval/Fraktur - hex for mathematical alphanumeric range
        $unicode_medieval_1 = { f0 9d 94 a5 }  // ùî• - fraktur h
        $unicode_medieval_2 = { f0 9d 94 a2 }  // ùî¢ - fraktur e
        $unicode_medieval_3 = { f0 9d 94 ?? }  // Fraktur range
        
        // Greek letters - hex for Greek range
        $unicode_greek_1 = { ce b7 }         // Œ∑ - Greek eta
        $unicode_greek_2 = { ce b5 }         // Œµ - Greek epsilon
        $unicode_greek_3 = { ce bb }         // Œª - Greek lambda
        $unicode_greek_4 = { ce ?? }         // Greek range
        
        // Cursive text - hex for mathematical script range
        $unicode_cursive_1 = { f0 9d 93 aa } // ùì™ - script a
        $unicode_cursive_2 = { f0 9d 93 ab } // ùì´ - script b
        
        // Monospace mathematical alphanumeric
        $unicode_monospace_1 = { f0 9d 9a 8a } // ùöä - monospace a
        $unicode_monospace_2 = { f0 9d 9a 8b } // ùöã - monospace b
        
        // Double-struck mathematical alphanumeric
        $unicode_double_struck_1 = { f0 9d 95 92 } // ùïí - double-struck a  
        $unicode_double_struck_2 = { f0 9d 94 b8 } // ùî∏ - double-struck A
        
        // Alternative medieval (mathematical bold fraktur)
        $unicode_alt_medieval_1 = { f0 9d 96 86 } // ùñÜ - bold fraktur a
        $unicode_alt_medieval_2 = { f0 9d 95 ac } // ùï¨ - bold fraktur A
        
        // Zalgo diacritical marks (corruption text) - corrected hex
        $zalgo_marks_1 = { cc 80 }           // \u0300 in UTF-8 (combining grave)
        $zalgo_marks_2 = { cc bd }           // \u033d in UTF-8 (combining x above)
        $zalgo_marks_3 = { cc ?? }           // Any combining diacritical mark
        $zalgo_text_1 = { 54 cc b8 }         // TÃ∏ - T with combining long solidus
        
        // Strikethrough and underline combining characters
        $strikethrough_mark = { cd b6 }      // \u0336 in UTF-8 (combining long stroke overlay)
        $underline_mark = { cc b2 }          // \u0332 in UTF-8 (combining double low line)
        
        // Invisible text encoding (Tags Unicode block) - corrected hex
        $invisible_tags_1 = { f3 a0 80 80 }  // \uE0000 in UTF-8 (tag null)
        $invisible_tags_2 = { f3 a0 ?? ?? }  // Tag range
        
        // Variation selector steganography - corrected hex
        $variation_selectors_1 = { ef b8 8e }  // \ufe0e in UTF-8 (text variation selector)
        $variation_selectors_2 = { ef b8 8f }  // \ufe0f in UTF-8 (emoji variation selector)
        $emoji_steganography = { f0 9f ?? ?? ef b8 8e }  // emoji + text selector
        $emoji_steganography_2 = { f0 9f ?? ?? ef b8 8f }  // emoji + emoji selector
        $multiple_selectors = { ef b8 8e ef b8 8f }  // Multiple variation selectors
        
        // Full-width character obfuscation - hex for fullwidth range
        $fullwidth_1 = { ef bc a1 }          // Ôº° - fullwidth A
        $fullwidth_2 = { e3 80 80 }          // „ÄÄ - fullwidth space
        
        // Wingdings and symbol substitution
        $wingdings_1 = { e2 99 8b }          // ‚ôã - cancer symbol
        $wingdings_2 = { e2 99 a0 }          // ‚ô† - spade suit
        $wingdings_3 = { e2 9c 81 }          // ‚úÅ - scissors symbol
        $wingdings_4 = { e2 9c 88 }          // ‚úà - airplane symbol
        $wingdings_5 = { e2 98 80 }          // ‚òÄ - sun symbol
        $wingdings_6 = { e2 98 85 }          // ‚òÖ - comet symbol
        
        // Base64/Base32 obfuscated content patterns
        $base64_pattern = /[A-Za-z0-9+\/]{20,}={0,2}/
        $base32_pattern = /[A-Z2-7]{8,}={0,6}/
        
        // Hex encoding patterns
        $hex_pattern = /[0-9a-fA-F]{2}(\s[0-9a-fA-F]{2}){5,}/
        
        // Binary encoding patterns
        $binary_pattern = /[01]{8}(\s[01]{8}){3,}/
        
        // Morse code patterns
        $morse_pattern = /[.-]{2,}(\s[.-]{2,}){3,}/
        
        // ROT13/Caesar cipher patterns
        $rot13_indicator = "nopqrstuvwxyzabcdefghijklm"
        $caesar_shift = "bcdefghijklmnopqrstuvwxyza"
        
        // ROT47 patterns (different from ROT13) - more specific
        $rot47_pattern = /[!"#$%&'()*+,\-.\/0-9:;<=>?@A-Z\[\\\]^_`a-z{|}~]{30,}/
        
        // ASCII85 encoding patterns
        $ascii85_pattern = /<~[!-u]+~>/
        
        // URL encoding patterns - require multiple occurrences
        $url_encode_pattern = /%[0-9a-fA-F]{2}.*%[0-9a-fA-F]{2}.*%[0-9a-fA-F]{2}/
        
        // HTML entity patterns - require multiple occurrences
        $html_entity_pattern = /&[a-zA-Z0-9#]+;.*&[a-zA-Z0-9#]+;.*&[a-zA-Z0-9#]+;/
        
        // Leetspeak obfuscation
        $leetspeak_1 = "h4ck3r"
        $leetspeak_2 = "3l1t3"
        $leetspeak_3 = "l33t"
        $leetspeak_4 = "p4ssw0rd"
        
        // NATO phonetic alphabet patterns
        $nato_1 = "Alpha Bravo Charlie"
        $nato_2 = "Delta Echo Foxtrot"
        $nato_3 = "Golf Hotel India"
        
        // Pig Latin patterns
        $pig_latin_1 = /\b\w+way\b/
        $pig_latin_2 = /\b\w+ay\b/
        
        // Mirror/reversed character patterns
        $mirror_chars_1 = { c9 92 }          // …í - reversed a
        $mirror_chars_2 = { ea 9e 81 }       // ÍûÅ - reversed l
        $mirror_chars_3 = { c6 a8 }          // ∆® - reversed s
        

        
    condition:
        // File size constraints (avoid false positives on very small/large files)
        filesize > 100 and filesize < 50MB
        and
        (
            // Set 1: Unicode Character Obfuscation (at least 2 different pattern types)
            (
                #unicode_upside_down_1 + #unicode_upside_down_2 + #unicode_upside_down_3 + #unicode_upside_down_4 + #unicode_upside_down_5 + 
                #unicode_runes_1 + #unicode_runes_2 + #unicode_runes_3 + #unicode_runes_4 + #unicode_runes_5 + 
                #unicode_braille_1 + #unicode_braille_2 + #unicode_braille_3 + 
                #unicode_small_caps_1 + #unicode_small_caps_2 + #unicode_small_caps_3 + #unicode_small_caps_4 + 
                #unicode_bubble_1 + #unicode_bubble_2 + #unicode_bubble_3 + 
                #unicode_medieval_1 + #unicode_medieval_2 + #unicode_medieval_3 + 
                #unicode_greek_1 + #unicode_greek_2 + #unicode_greek_3 + #unicode_greek_4 + 
                #unicode_cursive_1 + #unicode_cursive_2 + 
                #unicode_monospace_1 + #unicode_monospace_2 +
                #unicode_double_struck_1 + #unicode_double_struck_2 +
                #unicode_alt_medieval_1 + #unicode_alt_medieval_2 +
                #fullwidth_1 + #fullwidth_2 + 
                #wingdings_1 + #wingdings_2 + #wingdings_3 + #wingdings_4 + #wingdings_5 + #wingdings_6 +
                #mirror_chars_1 + #mirror_chars_2 + #mirror_chars_3
            ) >= 15
            or
            // Set 2: Steganographic Techniques
            (
                $emoji_steganography or $emoji_steganography_2 or $multiple_selectors
                or
                ($invisible_tags_1 or $invisible_tags_2)
                or
                ($variation_selectors_1 and $variation_selectors_2)
                or
                ($zalgo_text_1 or ($zalgo_marks_1 and $zalgo_marks_2) or $zalgo_marks_3 or $strikethrough_mark or $underline_mark)
            )
            or
            // Set 3: Encoding Patterns (at least 2 different types)
            (
                #base64_pattern + 
                #base32_pattern + 
                #hex_pattern + 
                #binary_pattern + 
                #morse_pattern + 
                #rot13_indicator + #caesar_shift + 
                #rot47_pattern +
                #ascii85_pattern +
                #url_encode_pattern +
                #html_entity_pattern +
                #nato_1 + #nato_2 + #nato_3 +
                #pig_latin_1 + #pig_latin_2 +
                #leetspeak_1 + #leetspeak_2 + #leetspeak_3 + #leetspeak_4
            ) >= 2
        )
}
